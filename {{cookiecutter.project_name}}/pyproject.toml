[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{cookiecutter.project_name}}"
version = "0.1.0"
description = "{{cookiecutter.project_description}}"
readme = "README.md"
requires-python = ">={{cookiecutter.python_version}}"
license = "MIT"
authors = [{ name = "{{cookiecutter.project_author}}" }]

dependencies = [
    # Add your project dependencies here
]

[project.optional-dependencies]
dev = ["pytest", "pytest-cov", "mypy", "ruff", "uv"]

[tool.hatch.build.targets.wheel]
packages = ["src/{{cookiecutter.project_name}}"]

[tool.pytest.ini_options]
addopts = "-v --cov=src/{{cookiecutter.project_name}} --cov-report=term-missing"
testpaths = ["tests"]

[tool.coverage.run]
source = ["src"]

[tool.mypy]
python_version = "{{cookiecutter.python_version}}"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
follow_imports = "silent"
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_equality = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["{{cookiecutter.project_name}}"]

[tool.ruff.lint.mccabe]
max-complexity = 10
